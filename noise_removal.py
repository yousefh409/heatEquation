# -*- coding: utf-8 -*-
"""Noise Removal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N1kgtCsGL0O8N-Op31uVTvi18FiPInlA
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from skimage import data, img_as_ubyte
from skimage.color import rgb2gray
import matplotlib.pyplot as plt
# %matplotlib inline

# Loading gray scale image in
image = rgb2gray(img_as_ubyte(data.chelsea()))
image_shape = image.shape

# Adding noise to image
for i in range(5, image.shape[0], 10):
  for j in range(5, image.shape[1], 10):
    for k in range(0, 2):
      for h in range(0, 2):
        image[i - k, j - h] = 0

plt.title('Original Image', fontsize=10)
plt.imshow(image, cmap=plt.cm.gray)

def update(image, i, j, dt = .1):
  delta = image[i, j - 1] + image[i - 1, j] + image[i, j + 1] + image[i + 1, j] - 4 * image[i, j]
  return image[i, j] + dt * delta

to_display = [1, 4, 9, 16, 25, 36, 50, 64, 81, 100]
current = image.copy()
for num in range(1, 101):
  next = np.zeros(image_shape)    
  for i in range(1, image_shape[0] - 1):
    for j in range(1, image_shape[1] - 1):
      next[i, j] = update(current, i, j)
  current = next
  if num in to_display:
    plt.title(f'Image After {num} iterations')
    plt.imshow(current, cmap=plt.cm.gray)
    plt.show()

plt.title('Image After Noise Removal')
plt.imshow(current, cmap=plt.cm.gray)
plt.show()